geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
simulated_by_reg <- simulated_regimes %>% mutate(`-10` = sum(simulated_regimes == -10))
View(simulated_by_reg$`-10`)
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(1000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- 10
simulations[simulations < -10] <- -10
simulated_regimes <- cbind(final.2017[c('Entity')], simulations)
simulated_by_reg <- simulated_regimes %>% mutate(`-10` = sum(simulated_regimes == -10))
View(simulated_by_reg$`-10`)
simulated_by_reg$`-10`
table(simulated_regimes)
table(simulated_regimes[1,])
View(table(simulated_regimes[1,]))
View(table(simulated_regimes[simulated_regimes$Entity == 'Afghanistan',]))
View(table(simulated_regimes[simulated_regimes$Entity == 'Afghanistan']))
k <- simulated_regimes[1,]
table(k)
View(table(k))
View(k)
simulations <- as.character(simulations)
View(simulations)
x <- rowSums(simulations == -10)
help(rowSums)
x <- base::rowSums(simulations == -10)
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(1000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
x <- rowSums(simulations == -10)
simulated_by_entity <- cbind(final.2017[c('Entity')], simulations)
View(x)
x
simulations
x <- rowSums(simulations == -10, na.rm = TRUE)
x
x <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
x
y <- do.call('cbind', x)
View(y)
simulated_by_entity <- cbind(final.2017[c('Entity')], counts)
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', x)
simulated_by_entity <- cbind(final.2017[c('Entity')], counts)
View(simulated_by_entity)
help(pivot_longer)
simulations.long <- simulated_by_entity %>% pivot_longer(cols = -c('Entity'), names_to = 'score')
View(simulations.long)
simulations.long <- simulated_by_entity %>% pivot_longer(cols = -c('Entity'), names_to = 'Regime')
simulations.long$Regime <- simulations.long$Regime - 10
simulations.long$Regime <- as.numeric(simulations.long$Regime) - 10
simulations.long <- simulated_by_entity %>% pivot_longer(cols = -c('Entity'), names_to = 'Regime')
simulations.long$Regime <- as.numeric(simulations.long$Regime) - 11
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(1000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', x)
simulated_by_entity <- cbind(final.2017[c('Entity')], counts)
simulations.long <- simulated_by_entity %>% pivot_longer(cols = -c('Entity'), names_to = 'Predicted')
simulations.long$Regime <- as.numeric(simulations.long$Regime) - 11
simulations.long$Predicted <- as.numeric(simulations.long$Regime) - 11
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
k <- merge(simulations.long, final.2017[c('Entity', 'Regime')], by = 'Entity')
View(lk)
View(k)
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
View(actual_values)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
View(actual_and_predicted)
ggplot(for.viewing, aes(x = Predicted, y = Entity)) + geom_tile(size = 0.4, fill = 'orange') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity)) + geom_tile(size = 0.4, fill = value) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
for.viewing <- actual_and_predicted[sample(1:nrow(actual_and_predicted)),][c(1:20),]
ggplot(for.viewing, aes(x = Predicted, y = Entity)) + geom_tile(size = 0.4, fill = value) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
View(for.viewing)
names(for.viewing)
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:nrow(actual_and_predicted)),][c(1:20),]
countries_for_viewing <- countries[sample(1:length(countries)),][c(1:20),]
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
countries_for_viewing
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'green')
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine4')
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine4') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
View(counts)
a <- apply(counts, 1, function(x) x/sum(x))
View(a)
sum(a[1,])
sum(a[,1])
sum(a[,2])
sum(a[2,])
a <- t(apply(counts, 1, function(x) x/sum(x)))
sum(a[2,])
sum(a[,2])
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
View(counts)
counts <- do.call('cbind', counts)
View(counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>% pivot_longer(cols = -c('Entity'), names_to = 'Predicted')
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
View(simulations.long)
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(1000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>%
pivot_longer(cols = -c('Entity'), names_to = 'Predicted') %>%
rename(Probability = value)
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = value)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(10000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>%
pivot_longer(cols = -c('Entity'), names_to = 'Predicted') %>%
rename(Probability = value)
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(10, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>%
pivot_longer(cols = -c('Entity'), names_to = 'Predicted') %>%
rename(Probability = value)
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(10000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>%
pivot_longer(cols = -c('Entity'), names_to = 'Predicted') %>%
rename(Probability = value)
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
rm(list = ls())
library(gganimate)
library(transformr)
library(RColorBrewer)
library(gridExtra)
library(glmnet)
library(tidyverse)
set.seed(39415)
regime.table <- read_rds('Data.rds')
head(regime.table[sample(1:nrow(regime.table)),], 5)
entity.table <- as.data.frame( table(regime.table$Entity) ) %>%
rename(Entity = Var1) %>% arrange(Freq)
print( paste('Median frequency (country):', floor(median(entity.table$Freq))) )
print( paste('Mean frequency (country):', floor(mean(entity.table$Freq))) )
head(rbind(head(entity.table, 5), tail(entity.table, 5)), 10)
year.table <- as.data.frame( table(regime.table$Year) ) %>%
rename(Year = Var1) %>% arrange(Freq)
print( paste('Median frequency (year):', floor(median(year.table$Freq))) )
print( paste('Mean frequency (year):', floor(mean(year.table$Freq))) )
head(rbind(head(year.table, 5), tail(year.table, 5)), 10)
# Prepare regime data for world map
for.map <- regime.table[c('Entity', 'Regime', 'Year')] %>%
rename(region = Entity) %>% mutate(Regime = as.integer(Regime) - 11)
# Prepare world data for world map
world <- map_data('world') %>% select(-c('subregion'))
world[world == 'UK'] <- 'United Kingdom'
world[world == 'USA'] <- 'United States'
world[world == 'Trinidad' | world == 'Tobago'] <- 'Trinidad and Tobago'
# Create list of data frames for animation
map_by_year <- function(coords, regimes, year) {
regimes.year <- regimes[regimes$Year == year,]
map.year     <- merge(regimes.year, coords, all = TRUE, by = 'region')
map.year     <- map.year[order(map.year$order),]
map.year$Year[is.na(map.year$Year)] <- year
return(map.year)
}
all.years <- unique(for.map$Year)
years.to_map <- all.years[seq(1, length(all.years), ceiling(length(all.years))/20)]
map.years <- lapply(years.to_map, function(x) { map_by_year(world, for.map, x) })
m <- do.call('rbind', map.years)
m <- m[order(m$order),]
boxplot(RegimeInt ~ Year, data = regime.table %>%
mutate(RegimeInt = as.integer(Regime) - 11),
ylab = 'Polity5 Regime Index', col = 'aquamarine3',
varwidth = TRUE)
regime.table_num <- regime.table %>% mutate(Regime = as.numeric(Regime) - 11)
gdp1.plot  <- ggplot(regime.table_num, aes(x = GDPPerCapita1, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$GDPPerCapita1)) +
ylim(-10, 10)
gdp10.plot <- ggplot(regime.table_num, aes(x = GDPPerCapita10, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$GDPPerCapita10)) +
ylim(-10, 10)
gdp1_log.plot  <- ggplot(regime.table_num, aes(x = log(GDPPerCapita1), y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(log(regime.table_num$GDPPerCapita1)), max(log(regime.table_num$GDPPerCapita1))) +
ylim(-10, 10)
gdp10_log.plot <- ggplot(regime.table_num, aes(x = log(GDPPerCapita10), y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(log(regime.table_num$GDPPerCapita10)), max(log(regime.table_num$GDPPerCapita10))) +
ylim(-10, 10)
grid.arrange(gdp1.plot, gdp10.plot, gdp1_log.plot, gdp10_log.plot, ncol = 2, nrow = 2)
gini1.plot  <- ggplot(regime.table_num, aes(x = GiniCoef1, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(regime.table_num$GiniCoef1), max(regime.table_num$GiniCoef1)) +
ylim(-10, 10)
gini10.plot <- ggplot(regime.table_num, aes(x = GiniCoef10, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(regime.table_num$GiniCoef10), max(regime.table_num$GiniCoef10)) +
ylim(-10, 10)
grid.arrange(gini1.plot, gini10.plot, ncol = 2)
poverty.plot  <- ggplot(regime.table_num, aes(x = DecadePoverty, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$DecadePoverty)) +
ylim(-10, 10)
poverty.plot
infm1.plot  <- ggplot(regime.table_num, aes(x = InfantMortality1, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$InfantMortality1)) +
ylim(-10, 10)
infm10.plot <- ggplot(regime.table_num, aes(x = InfantMortality10, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$InfantMortality10)) +
ylim(-10, 10)
grid.arrange(infm1.plot, infm10.plot, ncol = 2)
regime.table_num <- regime.table %>% mutate(Regime = as.numeric(Regime) - 11)
pop1.plot  <- ggplot(regime.table_num, aes(x = Population1, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(regime.table_num$Population1), max(regime.table_num$Population1)) +
ylim(-10, 10)
pop10.plot <- ggplot(regime.table_num, aes(x = Population10, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(regime.table_num$Population10), max(regime.table_num$Population10)) +
ylim(-10, 10)
pop1_log.plot  <- ggplot(regime.table_num, aes(x = log(Population1), y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(log(regime.table_num$Population1)), max(log(regime.table_num$Population1))) +
ylim(-10, 10)
pop10_log.plot <- ggplot(regime.table_num, aes(x = log(Population10), y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(min(log(regime.table_num$Population10)), max(log(regime.table_num$Population10))) +
ylim(-10, 10)
grid.arrange(pop1.plot, pop10.plot, pop1_log.plot, pop10_log.plot, ncol = 2, nrow = 2)
ysch1.plot  <- ggplot(regime.table_num, aes(x = YearsSchooling1.5, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$YearsSchooling1.5)) +
ylim(-10, 10)
ysch10.plot <- ggplot(regime.table_num, aes(x = YearsSchooling6.10, y = jitter(Regime))) +
geom_point() + geom_smooth(method = 'lm') +
xlim(0, max(regime.table_num$YearsSchooling6.10)) +
ylim(-10, 10)
grid.arrange(ysch1.plot, ysch10.plot, ncol = 2)
##----------FUNCTIONS----------##
names_times_x <- function(x, col_names) {
new_names <- c()
for(i in 1:x) {
names_x <- paste0(col_names, i)
new_names <- c(new_names, names_x)
}
return(new_names)
}
model.lasso_cv <- function(df) {
as.mat <- model.matrix(Regime ~ ., df)[,-1]
reg <- df$Regime
cv_model <- cv.glmnet(as.mat, reg, alpha = 1, intercept = FALSE)
best_lambda <- cv_model$lambda.min
best_model <- glmnet(as.mat, reg, alpha = 1, lambda = best_lambda,
intercept = FALSE)
return(best_model)
}
# Use logged values determined in the data exploration
logged.table <- regime.table
logged.table[,names_times_x(10, 'GDPPerCapita')] <-
log(logged.table[,names_times_x(10, 'GDPPerCapita')])
logged.table[,names_times_x(10, 'Population')] <-
log(logged.table[,names_times_x(10, 'Population')])
logged.table_with_year_and_entity <- logged.table %>%
mutate(Regime = as.numeric(Regime))
logged.table <- logged.table %>% select(-c('Year', 'Entity')) %>%
mutate(Regime = as.numeric(Regime))
##----------AUTOMATIC FEATURE SELECTION----------##
all_features <- names(logged.table)
# (1) 1,10; (2) 9,10; (3) 8,10; (4) 5,10; (5) 1-10; (6) 1-5
selection.labels <- c('Years 1, 10', 'Years 9, 10', 'Years 8, 10',
'Years 5-10', 'Years 1-10', 'Years 1-5')
selections <- list(c(all_features[grepl('.+(1|10)', all_features)]),
c(all_features[grepl('.+(9|10)', all_features)]),
c(all_features[grepl('.+(8|10)', all_features)]),
c(all_features[grepl('[a-zA-Z](6.)*(5|10)', all_features)]),
c(all_features[grepl('.+[0-9]', all_features)]),
c(all_features[grepl('.+[1-5]$', all_features)]))
selections <- lapply(selections, function(x) { c(all_features[c(1:2)], x) })
models <- vector("list", length(selections))
for(i in 1:length(selections)) {
selected <- logged.table[, selections[[i]]]
rval <- model.lasso_cv(selected)
models[[i]] <- rval
all.features <- coef(models[[i]])@Dimnames[[1]]
non_zero.indices <- !as.numeric(coef(models[[i]]) == 0)
non_zero.features <- all.features[non_zero.indices]
print(paste0('-----------', selection.labels[[i]], '-----------'))
print(sort(non_zero.features))
print(paste('R-squared:', models[[i]]$dev.ratio))
}
best.model <- models[[1]]
coef(best.model)
new.features <- c('GDPPerCapita10', 'GiniCoef10',
'InfantMortality10', 'LifeSpan10', 'YearsSchooling1.5',
'YearsSchooling6.10', 'Population1', 'Population10')
new.table <- logged.table[c('Regime', new.features)]
new.model <- lm(Regime ~ . - 1, data = new.table)
summary(new.model)
final.data <- logged.table_with_year_and_entity[, c('Regime', 'Entity', 'Year', new.features)]
final.to_2017 <- final.data[final.data$Year < 2017,] %>% select(-c('Year', 'Entity'))
final.2017 <- final.data[final.data$Year == 2017,]
final.model <- lm(Regime ~ ., data = final.to_2017)
final.predictions <- predict(final.model, final.2017, se.fit = TRUE)
final.predicted <- trunc(final.predictions$fit)
final.distance <- final.predicted - final.2017$Regime
final.rmse <- sqrt(mean(final.distance^2))
final.rmse
# Simulate to get probabilities for visualization
standard_devs <- sqrt((final.predictions$se.fit)^2 + (final.predictions$residual.scale)^2)
simulations <- replicate(10000, rnorm(final.predicted, mean = final.predicted, sd = standard_devs))
simulations <- trunc(simulations) - 11
simulations[simulations > 10] <- NA
simulations[simulations < -10] <- NA
counts <- lapply(c(-10:10), function(n) { rowSums(simulations == n, na.rm = TRUE) })
counts <- do.call('cbind', counts)
props <- t(apply(counts, 1, function(x) { x/sum(x) }))
simulated_by_entity <- cbind(final.2017[c('Entity')], props)
simulations.long <- simulated_by_entity %>%
pivot_longer(cols = -c('Entity'), names_to = 'Predicted') %>%
rename(Probability = value)
simulations.long$Predicted <- as.numeric(simulations.long$Predicted) - 11
actual_values <- final.2017 %>% rename(Actual = Regime) %>%
select(c('Entity', 'Actual')) %>% mutate(Actual = Actual - 11)
actual_and_predicted <- merge(simulations.long, actual_values, by = 'Entity')
countries <- unique(actual_and_predicted$Entity)
countries_for_viewing <- countries[sample(1:length(countries))][c(1:20)]
for.viewing <- actual_and_predicted[actual_and_predicted$Entity %in% countries_for_viewing,]
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw()
help(knitr)
help("knit_print.gganim")
ggplot(for.viewing, aes(x = Predicted, y = Entity, fill = Probability)) + geom_tile(size = 0.4) +
scale_fill_gradient(low = 'white', high = 'aquamarine3') +
geom_point(data = for.viewing, aes(x = Actual, y = Entity), col = 'black') +
theme_bw() + labs(title = 'Predicated and Actual Polity5 Regime Values, 2017')
help(rm)
print(maps[[1]])
maps = vector("list", length(20))
for(i in 1:20) {
mp <- map.years[[i]]
maps[[i]] <- ggplot(data = mp,
aes(x = long, y = lat, fill = Regime)) +
geom_map(map = mp, aes(map_id = region), color = 'black', size = 0.1) +
scale_fill_gradient2(low = 'orange', high = 'deepskyblue3', mid = 'white') +
theme_bw() + guides(fill = 'none') + labs(title = mp$Year)
}
print(maps[[1]])
